package other;

public class Demo3 {

	public static void main(String[] args) {
		son s=new son();
//		s.Work();
		mather ma=new mather(s);
//		ma.Work();
        father fa=new father(s);
        fa.Work();
	}

}
/*练习：
一家三口每个人都会工作，儿子的工作就是画画，母亲的工作就是在儿子的基础上做一个增强，不单止可以画画，还可以上涂料。
爸爸的工作就是在妈妈基础上做了增强，就是上画框。
子父类存在同名的非静态的成员函数时，访问的是子类的成员函数。
*/
interface Work{
	public void Work();
}
//实现接口类
class son implements Work{
	@Override
	public void Work() {
	  System.out.println("画画...");	
		
	}
}
//实现接口类
class mather implements Work{
     Work work; 	//需要被增强的类。
	 //构造函数
     public mather(Work work){
    	 this.work=work;  //实际传的是son对象 
     }
     
	@Override
	public void Work(){
	  work.Work();
	  System.out.println("涂料...");		
	}
}

class father implements Work{
    Work work;  	//需要被增强的类的引用
	 //构造函数
    public father(Work work){
   	 this.work=work;  //实际传的是子类对象    
    }
    
	@Override
	public void Work(){
	  work.Work(); //子类对象的方法；  多态  father fa=new son();   son继承与father类
	  System.out.println("画框...");		
	}
}
